as.character(lapply(coordN1, `[`, 2)),sep = "º"),
coordN3=paste(as.character(lapply(coordN1, `[`, 4)),"\"", sep = ""),
coordN4=paste(as.character(lapply(coordN1, `[`, 3)),coordN3, sep="."),
coordN=paste(coordN2,coordN4, sep="\'"),
### para coordW
coordW1=stri_extract_all(coordW,regex="[0-9]{2,3}"),
coordW2=paste(as.character(lapply(coordW1, `[`, 1)),
as.character(lapply(coordW1, `[`, 2)),sep = "º"),
coordW3=paste(as.character(lapply(coordW1, `[`, 4)),"\"", sep = ""),
coordW4=paste(as.character(lapply(coordW1, `[`, 3)),coordW3, sep="."),
coordW=paste(coordW2,coordW4, sep="\'"),
## Agrego NAs
coordN=ifelse(str_detect(coordN,"NA"),NA,coordN),
coordW=ifelse(str_detect(coordW,"NA"),NA,coordW),
#_____________ LIMPIEZA GENERAL
#_____________
##### Limpieza de coordenadas volteadas
coord_aux= coordN,
coordN= ifelse(str_detect(coordN,"[0-9]{3}º"),coordW,coordN),
coordW= ifelse(str_detect(coord_aux,"[0-9]{3}º"),coord_aux,coordW)
)
refugios$coord_aux<-NULL
refugios$coordN1<-NULL
refugios$coordN2<-NULL
refugios$coordN3<-NULL
refugios$coordN4<-NULL
refugios$coordW1<-NULL
refugios$coordW2<-NULL
refugios$coordW3<-NULL
refugios$coordW4<-NULL
#_____________ IMPUTACION
#_____________
##### Relleno de coordenadas faltantes con google API ######
new_DF <- refugios[is.na(refugios$coordN),]
#################################################################################PONER LLAVE API DE GOOGLE
register_google(key = "AIzaSyCq56DZ7EQ-dWakmHlcGic80bnWXYSSh2A", write = TRUE) #registro de llave
cc <- map_df(1:nrow(new_DF), ~ geocode(paste(new_DF$calle[.], new_DF$municipio[.] , sep=" "))) #crea df de coordenadas faltantes
refugios[is.na(refugios$coordN), ]$coordN <- cc$lat #rellelna latitud
refugios[is.na(refugios$coordW), ]$coordW <- abs(cc$lon) #rellena longitud
###############
## Cambio de coordenadas a strings ##
refugios$coordN <- as.character(refugios$coordN)
refugios$coordW <- as.character(refugios$coordW)
return(refugios)
}
refugios <- import_data()
import_data <- function() {
# Librerias
library(openxlsx)
library(readxl)
library(stringr) #para limpiza regex
library(stringi) #para limpiza regex
library(dplyr) #para limpiza regex
library(tidyverse)
library(ggmap)#para rellenar coordenadas faltantes
file <- 'data/refugios_nayarit.xlsx'
refugios <- data.frame()
for (i in 1:length(excel_sheets(file))){
refugios <- rbind(refugios,head(read.xlsx(file, sheet= i, startRow = 7, colNames = F),-1))
}
colnames(refugios) <- c('id',
'refugio',
'municipio',
'calle',
'uso',
'servicios',
'capacidad',
'coordN',
'coordW',
'altitud',
'responsable',
'telefono')
#_____________ LIMPIEZA TELEFONOS
#_____________
refugios<-refugios %>% mutate(NEXTEL=ifelse(str_detect(telefono,"NEXTEL"),1,0),
aux_tel= str_remove_all(telefono,"[A-Z]|[.]|[-]|[:]|[,]"),
#telefono1=str_extract(aux_tel,"[0-9]"),
vector_telef=stri_extract_all(aux_tel,regex="[0-9]{0,2}[*]{0,1}[0-9]{6,12}[*]{0,1}[0-9]{0,2}"),
tel1=as.character(lapply(vector_telef, `[`, 1)),
tel2=as.character(lapply(vector_telef, `[`, 2)),
tel3=as.character(lapply(vector_telef, `[`, 3)),
tel4=as.character(lapply(vector_telef, `[`, 4)),
#correccion ad hoc para numeros nextel
nextel=ifelse(NEXTEL==1,tel2,NA),
tel2=ifelse(NEXTEL==1,NA,tel2))
refugios$NEXTEL<-NULL
refugios$vector_telef<-NULL
refugios$aux_tel<-NULL
refugios$telefono<-NULL
#_____________ LIMPIEZA COORDENADAS
#_____________
refugios<- refugios %>% mutate(
### para coordN
coordN1=stri_extract_all(coordN,regex="[0-9]{2,3}"),
coordN2=paste(as.character(lapply(coordN1, `[`, 1)),
as.character(lapply(coordN1, `[`, 2)),sep = "º"),
coordN3=paste(as.character(lapply(coordN1, `[`, 4)),"\"", sep = ""),
coordN4=paste(as.character(lapply(coordN1, `[`, 3)),coordN3, sep="."),
coordN=paste(coordN2,coordN4, sep="\'"),
### para coordW
coordW1=stri_extract_all(coordW,regex="[0-9]{2,3}"),
coordW2=paste(as.character(lapply(coordW1, `[`, 1)),
as.character(lapply(coordW1, `[`, 2)),sep = "º"),
coordW3=paste(as.character(lapply(coordW1, `[`, 4)),"\"", sep = ""),
coordW4=paste(as.character(lapply(coordW1, `[`, 3)),coordW3, sep="."),
coordW=paste(coordW2,coordW4, sep="\'"),
## Agrego NAs
coordN=ifelse(str_detect(coordN,"NA"),NA,coordN),
coordW=ifelse(str_detect(coordW,"NA"),NA,coordW),
#_____________ LIMPIEZA GENERAL
#_____________
##### Limpieza de coordenadas volteadas
coord_aux= coordN,
coordN= ifelse(str_detect(coordN,"[0-9]{3}º"),coordW,coordN),
coordW= ifelse(str_detect(coord_aux,"[0-9]{3}º"),coord_aux,coordW)
)
refugios$coord_aux<-NULL
refugios$coordN1<-NULL
refugios$coordN2<-NULL
refugios$coordN3<-NULL
refugios$coordN4<-NULL
refugios$coordW1<-NULL
refugios$coordW2<-NULL
refugios$coordW3<-NULL
refugios$coordW4<-NULL
#_____________ IMPUTACION
#_____________
##### Relleno de coordenadas faltantes con google API ######
new_DF <- refugios[is.na(refugios$coordN),]
#################################################################################PONER LLAVE API DE GOOGLE
register_google(key = "AIzaSyCq56DZ7EQ-dWakmHlcGic80bnWXYSSh2A", write = TRUE) #registro de llave
cc <- map_df(1:nrow(new_DF), ~ geocode(paste(new_DF$calle[.], new_DF$municipio[.] , sep=" "))) #crea df de coordenadas faltantes
refugios[is.na(refugios$coordN), ]$coordN <- cc$lat #rellelna latitud
refugios[is.na(refugios$coordW), ]$coordW <- abs(cc$lon) #rellena longitud
###############
## Cambio de coordenadas a strings ##
refugios$coordN <- as.character(refugios$coordN)
refugios$coordW <- as.character(refugios$coordW)
return(refugios)
}
refugios <- import_data()
import_data <- function() {
# Librerias
library(openxlsx)
library(readxl)
library(stringr) #para limpiza regex
library(stringi) #para limpiza regex
library(dplyr) #para limpiza regex
library(tidyverse)
library(ggmap)#para rellenar coordenadas faltantes
file <- 'data/refugios_nayarit.xlsx'
refugios <- data.frame()
for (i in 1:length(excel_sheets(file))){
refugios <- rbind(refugios,head(read.xlsx(file, sheet= i, startRow = 7, colNames = F),-1))
}
colnames(refugios) <- c('id',
'refugio',
'municipio',
'calle',
'uso',
'servicios',
'capacidad',
'coordN',
'coordW',
'altitud',
'responsable',
'telefono')
#_____________ LIMPIEZA TELEFONOS
#_____________
refugios<-refugios %>% mutate(NEXTEL=ifelse(str_detect(telefono,"NEXTEL"),1,0),
aux_tel= str_remove_all(telefono,"[A-Z]|[.]|[-]|[:]|[,]"),
#telefono1=str_extract(aux_tel,"[0-9]"),
vector_telef=stri_extract_all(aux_tel,regex="[0-9]{0,2}[*]{0,1}[0-9]{6,12}[*]{0,1}[0-9]{0,2}"),
tel1=as.character(lapply(vector_telef, `[`, 1)),
tel2=as.character(lapply(vector_telef, `[`, 2)),
tel3=as.character(lapply(vector_telef, `[`, 3)),
tel4=as.character(lapply(vector_telef, `[`, 4)),
#correccion ad hoc para numeros nextel
nextel=ifelse(NEXTEL==1,tel2,NA),
tel2=ifelse(NEXTEL==1,NA,tel2))
refugios$NEXTEL<-NULL
refugios$vector_telef<-NULL
refugios$aux_tel<-NULL
refugios$telefono<-NULL
#_____________ LIMPIEZA COORDENADAS
#_____________
refugios<- refugios %>% mutate(
### para coordN
coordN1=stri_extract_all(coordN,regex="[0-9]{2,3}"),
coordN2=paste(as.character(lapply(coordN1, `[`, 1)),
as.character(lapply(coordN1, `[`, 2)),sep = "º"),
coordN3=paste(as.character(lapply(coordN1, `[`, 4)),"\"", sep = ""),
coordN4=paste(as.character(lapply(coordN1, `[`, 3)),coordN3, sep="."),
coordN=paste(coordN2,coordN4, sep="\'"),
### para coordW
coordW1=stri_extract_all(coordW,regex="[0-9]{2,3}"),
coordW2=paste(as.character(lapply(coordW1, `[`, 1)),
as.character(lapply(coordW1, `[`, 2)),sep = "º"),
coordW3=paste(as.character(lapply(coordW1, `[`, 4)),"\"", sep = ""),
coordW4=paste(as.character(lapply(coordW1, `[`, 3)),coordW3, sep="."),
coordW=paste(coordW2,coordW4, sep="\'"),
## Agrego NAs a las columnas con algun valor en NA y a su coordenada pareja
coordN=ifelse(str_detect(coordN,"NA"),NA,coordN),
coordW=ifelse(str_detect(coordW,"NA"),NA,coordW),
coordN=ifelse(str_detect(coordW,"NA"),NA,coordN),
coordW=ifelse(str_detect(coordN,"NA"),NA,coordW),
#_____________ LIMPIEZA GENERAL
#_____________
##### Limpieza de coordenadas volteadas
coord_aux= coordN,
coordN= ifelse(str_detect(coordN,"[0-9]{3}º"),coordW,coordN),
coordW= ifelse(str_detect(coord_aux,"[0-9]{3}º"),coord_aux,coordW)
)
refugios$coord_aux<-NULL
refugios$coordN1<-NULL
refugios$coordN2<-NULL
refugios$coordN3<-NULL
refugios$coordN4<-NULL
refugios$coordW1<-NULL
refugios$coordW2<-NULL
refugios$coordW3<-NULL
refugios$coordW4<-NULL
#_____________ IMPUTACION
#_____________
##### Relleno de coordenadas faltantes con google API ######
new_DF <- refugios[is.na(refugios$coordN),]
#################################################################################PONER LLAVE API DE GOOGLE
register_google(key = "AIzaSyCq56DZ7EQ-dWakmHlcGic80bnWXYSSh2A", write = TRUE) #registro de llave
cc <- map_df(1:nrow(new_DF), ~ geocode(paste(new_DF$calle[.], new_DF$municipio[.] , sep=" "))) #crea df de coordenadas faltantes
refugios[is.na(refugios$coordN), ]$coordN <- cc$lat #rellelna latitud
refugios[is.na(refugios$coordW), ]$coordW <- abs(cc$lon) #rellena longitud
###############
## Cambio de coordenadas a strings ##
refugios$coordN <- as.character(refugios$coordN)
refugios$coordW <- as.character(refugios$coordW)
return(refugios)
}
refugios <- import_data()
View(refugios)
View(refugios)
r2 <- refugios %>% filter(id %in% x)
x<-c(337,75,83,84,338,336,118,286,213,283,121,310,281)
r2 <- refugios %>% filter(id %in% x)
View(r2)
x<-c(118)
r2 <- refugios %>% filter(id %in% x)
coord_to_float<-function(data){
#limpieza (diagonal final)
data$coordN <- substr(data$coordN,1,nchar(data$coordN)-1)
data$coordW <- substr(data$coordW,1,nchar(data$coordW)-1)
data <- data %>% mutate(
w = as.double(map(strsplit(r2$coordW,"([º,'])"),1)) + #grados
as.double(map(strsplit(r2$coordW,"([º,'])"),2))/60 + #minutos
round(as.double(map(strsplit(r2$coordW,"([º,'])"),3)))/3600, #segundos
n = as.double(map(strsplit(r2$coordN,"([º,'])"),1)) +
as.double(map(strsplit(r2$coordN,"([º,'])"),2))/60 +
round(as.double(map(strsplit(r2$coordN,"([º,'])"),3)))/3600)
data
}
coord_to_float(r2)
data <- data %>% mutate(
w = as.double(map(strsplit(data$coordW,"([º,'])"),1)) + #grados
as.double(map(strsplit(data$coordW,"([º,'])"),2))/60 + #minutos
round(as.double(map(strsplit(data$coordW,"([º,'])"),3)))/3600, #segundos
n = as.double(map(strsplit(data$coordN,"([º,'])"),1)) +
as.double(map(strsplit(data$coordN,"([º,'])"),2))/60 +
round(as.double(map(strsplit(data$coordN,"([º,'])"),3)))/3600)
coord_to_float<-function(data){
#limpieza (diagonal final)
data$coordN <- substr(data$coordN,1,nchar(data$coordN)-1)
data$coordW <- substr(data$coordW,1,nchar(data$coordW)-1)
data <- data %>% mutate(
w = as.double(map(strsplit(data$coordW,"([º,'])"),1)) + #grados
as.double(map(strsplit(data$coordW,"([º,'])"),2))/60 + #minutos
round(as.double(map(strsplit(data$coordW,"([º,'])"),3)))/3600, #segundos
n = as.double(map(strsplit(data$coordN,"([º,'])"),1)) +
as.double(map(strsplit(data$coordN,"([º,'])"),2))/60 +
round(as.double(map(strsplit(data$coordN,"([º,'])"),3)))/3600)
data
}
coord_to_float(r2)
str_detect(refugios$coordN,[0-9]*.[0-9]*)
str_detect(refugios$coordN,"[0-9]*.[0-9]*")
str_detect(refugios$coordN,"[0-9]*[.][0-9]*")
str_detect(refugios$coordN,"[0-9]{2}[.][0-9]")
str_detect(refugios$coordN,"[0-9]{2}[\.][0-9]")
str_detect(refugios$coordN,"[0-9]{2}[\\.][0-9]")
str_detect(refugios$coordN,"[0-9]{2}\.[0-9]")
str_detect(refugios$coordN,"[0-9]{2}\\.[0-9]")
str_detect(refugios$coordN,"[0-9]{2}\.[0-9]")
str_detect(refugios$coordN,"[0-9]{2}\\.[0-9]")
str_detect(refugios$coordN,"\\.")
str_detect(refugios$coordN,"\\'")
trouble_subset<- refugios %>% filter(str_detect(coordN,"\\'"))
good_subset<- refugios %>% filter(str_detect(coordN,"\\'"))
unique(good_subset$id)
good_subset<- refugios %>% filter(str_detect(coordN,"\\'"))
a<-unique(refugios$id)
b<-unique(good_subset$id)
setdiff(a, b)
coord_to_float(a)
coord_to_float(good_subset)
coord_to_float<-function(data){
#Esta función tiene el objetivo de convertir en numerico las coordenadas
#Sin embargo en la base de datos contamos con las ubicaciones en coordenada y en numero debido a que la API de google las imputa en numerico
#Por ello, tenemos que dividir la base en dos para cada tipo de ubicación y luego las juntamos.
#Parte I: DIVISION EN 2
# Dataset con coordenadas en grados
good_subset<- refugios %>% filter(str_detect(coordN,"\\'"))
# Dataset con coordenadas en numero
a<-unique(refugios$id)
b<-unique(good_subset$id)
c<-setdiff(a, b)
trouble_subset<- refugios %>% filter(id %in% c)
#Parte II: CONVERSION DE GRADO A NUMERICO
good_subset$coordN <- substr(good_subset$coordN,1,nchar(good_subset$coordN)-1)
good_subset$coordW <- substr(good_subset$coordW,1,nchar(good_subset$coordW)-1)
good_subset <- good_subset %>% mutate(
w = as.double(map(strsplit(good_subset$coordW,"([º,'])"),1)) + #grados
as.double(map(strsplit(good_subset$coordW,"([º,'])"),2))/60 + #minutos
round(as.double(map(strsplit(good_subset$coordW,"([º,'])"),3)))/3600, #segundos
n = as.double(map(strsplit(good_subset$coordN,"([º,'])"),1)) +
as.double(map(strsplit(good_subset$coordN,"([º,'])"),2))/60 +
round(as.double(map(strsplit(good_subset$coordN,"([º,'])"),3)))/3600)
#Parte III: ADECUACION DE LA BASE EN NUMERICO
trouble_subset<-trouble_subset %>% mutate(
w=coordW,
n=coordN)
#Parte IV: MERGE DE AMBAS BASES
data<-as.data.frame(rbind(good_subset,trouble_subset))
data
)
}
coord_to_float<-function(data){
#Esta función tiene el objetivo de convertir en numerico las coordenadas
#Sin embargo en la base de datos contamos con las ubicaciones en coordenada y en numero debido a que la API de google las imputa en numerico
#Por ello, tenemos que dividir la base en dos para cada tipo de ubicación y luego las juntamos.
#Parte I: DIVISION EN 2
# Dataset con coordenadas en grados
good_subset<- refugios %>% filter(str_detect(coordN,"\\'"))
# Dataset con coordenadas en numero
a<-unique(refugios$id)
b<-unique(good_subset$id)
c<-setdiff(a, b)
trouble_subset<- refugios %>% filter(id %in% c)
#Parte II: CONVERSION DE GRADO A NUMERICO
good_subset$coordN <- substr(good_subset$coordN,1,nchar(good_subset$coordN)-1)
good_subset$coordW <- substr(good_subset$coordW,1,nchar(good_subset$coordW)-1)
good_subset <- good_subset %>% mutate(
w = as.double(map(strsplit(good_subset$coordW,"([º,'])"),1)) + #grados
as.double(map(strsplit(good_subset$coordW,"([º,'])"),2))/60 + #minutos
round(as.double(map(strsplit(good_subset$coordW,"([º,'])"),3)))/3600, #segundos
n = as.double(map(strsplit(good_subset$coordN,"([º,'])"),1)) +
as.double(map(strsplit(good_subset$coordN,"([º,'])"),2))/60 +
round(as.double(map(strsplit(good_subset$coordN,"([º,'])"),3)))/3600)
#Parte III: ADECUACION DE LA BASE EN NUMERICO
trouble_subset<-trouble_subset %>% mutate(
w=coordW,
n=coordN)
#Parte IV: MERGE DE AMBAS BASES
data<-as.data.frame(rbind(good_subset,trouble_subset))
data
}
a<-coord_to_float(refugios)
View(a)
shiny::runApp()
motor_refugio_cercano(12,12)
View(r2)
summary(r2)
runApp()
runApp()
runApp()
import_data <- function() {
# Librerias
library(openxlsx)
library(readxl)
library(stringr) #para limpiza regex
library(stringi) #para limpiza regex
library(dplyr) #para limpiza regex
library(tidyverse)
library(ggmap)#para rellenar coordenadas faltantes
file <- 'data/refugios_nayarit.xlsx'
refugios <- data.frame()
for (i in 1:length(excel_sheets(file))){
refugios <- rbind(refugios,head(read.xlsx(file, sheet= i, startRow = 7, colNames = F),-1))
}
colnames(refugios) <- c('id',
'refugio',
'municipio',
'calle',
'uso',
'servicios',
'capacidad',
'coordN',
'coordW',
'altitud',
'responsable',
'telefono')
#_____________ LIMPIEZA TELEFONOS
#_____________
refugios<-refugios %>% mutate(NEXTEL=ifelse(str_detect(telefono,"NEXTEL"),1,0),
aux_tel= str_remove_all(telefono,"[A-Z]|[.]|[-]|[:]|[,]"),
#telefono1=str_extract(aux_tel,"[0-9]"),
vector_telef=stri_extract_all(aux_tel,regex="[0-9]{0,2}[*]{0,1}[0-9]{6,12}[*]{0,1}[0-9]{0,2}"),
tel1=as.character(lapply(vector_telef, `[`, 1)),
tel2=as.character(lapply(vector_telef, `[`, 2)),
tel3=as.character(lapply(vector_telef, `[`, 3)),
tel4=as.character(lapply(vector_telef, `[`, 4)),
#correccion ad hoc para numeros nextel
nextel=ifelse(NEXTEL==1,tel2,NA),
tel2=ifelse(NEXTEL==1,NA,tel2))
refugios$NEXTEL<-NULL
refugios$vector_telef<-NULL
refugios$aux_tel<-NULL
refugios$telefono<-NULL
#_____________ LIMPIEZA COORDENADAS
#_____________
refugios<- refugios %>% mutate(
### para coordN
coordN1=stri_extract_all(coordN,regex="[0-9]{2,3}"),
coordN2=paste(as.character(lapply(coordN1, `[`, 1)),
as.character(lapply(coordN1, `[`, 2)),sep = "º"),
coordN3=paste(as.character(lapply(coordN1, `[`, 4)),"\"", sep = ""),
coordN4=paste(as.character(lapply(coordN1, `[`, 3)),coordN3, sep="."),
coordN=paste(coordN2,coordN4, sep="\'"),
### para coordW
coordW1=stri_extract_all(coordW,regex="[0-9]{2,3}"),
coordW2=paste(as.character(lapply(coordW1, `[`, 1)),
as.character(lapply(coordW1, `[`, 2)),sep = "º"),
coordW3=paste(as.character(lapply(coordW1, `[`, 4)),"\"", sep = ""),
coordW4=paste(as.character(lapply(coordW1, `[`, 3)),coordW3, sep="."),
coordW=paste(coordW2,coordW4, sep="\'"),
## Agrego NAs a las columnas con algun valor en NA y a su coordenada pareja
coordN=ifelse(str_detect(coordN,"NA"),NA,coordN),
coordW=ifelse(str_detect(coordW,"NA"),NA,coordW),
coordN=ifelse(str_detect(coordW,"NA"),NA,coordN),
coordW=ifelse(str_detect(coordN,"NA"),NA,coordW),
#_____________ LIMPIEZA GENERAL
#_____________
##### Limpieza de coordenadas volteadas
coord_aux= coordN,
coordN= ifelse(str_detect(coordN,"[0-9]{3}º"),coordW,coordN),
coordW= ifelse(str_detect(coord_aux,"[0-9]{3}º"),coord_aux,coordW)
)
refugios$coord_aux<-NULL
refugios$coordN1<-NULL
refugios$coordN2<-NULL
refugios$coordN3<-NULL
refugios$coordN4<-NULL
refugios$coordW1<-NULL
refugios$coordW2<-NULL
refugios$coordW3<-NULL
refugios$coordW4<-NULL
#_____________ IMPUTACION
#_____________
##### Relleno de coordenadas faltantes con google API ######
new_DF <- refugios[is.na(refugios$coordN),]
#################################################################################PONER LLAVE API DE GOOGLE
register_google(key = "AIzaSyCq56DZ7EQ-dWakmHlcGic80bnWXYSSh2A", write = TRUE) #registro de llave
cc <- map_df(1:nrow(new_DF), ~ geocode(paste(new_DF$calle[.],new_DF$municipio[.] ,"Nayarit", sep=" "))) #crea df de coordenadas faltantes
refugios[is.na(refugios$coordN), ]$coordN <- cc$lat #rellelna latitud
refugios[is.na(refugios$coordW), ]$coordW <- abs(cc$lon) #rellena longitud
###############
## Cambio de coordenadas a strings ##
refugios$coordN <- as.character(refugios$coordN)
refugios$coordW <- as.character(refugios$coordW)
return(refugios)
}
refugios <- import_data()
runApp()
View(refugios)
View(trouble_subset)
runApp()
runApp()
cc <- map_df(1:nrow(new_DF), ~ geocode(paste(new_DF$refugio[.],new_DF$municipio[.] ,"Nayarit México", sep=" "))) #crea df de coordenadas faltantes
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(refugios)
View(r2)
motor_refugio_cercano(105.3603,22.49889)
motor_refugio_cercano(-105.3603,22.49889)
source("1_packages.R")
source("2_functions.R")
data <- import_data()
data<-coord_to_float(data)
motor_refugio_cercano(-105.3603,22.49889)
(ref<-motor_refugio_cercano(-105.3603,22.49889))
paint_map(-ref[[1]],ref[[2]])
motor_refugios_municipio_map(ref[[4]])
View(ref)
# tabla
refugios %>%
filter(municipio==ref[[4]]) %>%
select(-coordN,-coordW,-altitud)
#Tabla
tabla_p1<-data %>%
filter(id==ref[[3]]) %>%
select(-coordN,-coordW,-altitud)
View(tabla_p1)
# tabla
tabla_p3<-data %>%
filter(municipio==ref[[4]]) %>%
select(-coordN,-coordW,-altitud)
# mapa
motor_refugios_municipio_map(ref[[4]])
View(tabla_p3)
data <- import_data() %>% coord_to_float()
runApp()
